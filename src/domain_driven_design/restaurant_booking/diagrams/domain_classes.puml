@startuml


together {
  class Menu
  entity Dish
  enum DishType
}

together {
  abstract BookingRecorder
  entity Booking
  class BookingDate
  abstract Bill
  entity BillItem
}

entity Dish {
  Integer id
  String name
  String description
  Price price
  DishType type
}

class  Price #grey {
  Double amount
  String currency
}

entity PayingGuest {
  Integer id
  String name
  Phonenumber phoneNumber
}

Menu -> Dish
Dish -> DishType
Dish -> Price

BookingRecorder -> Booking
Booking -down-> Bill
Booking -> BookingDate


Bill -> BillItem
Menu -[hidden]-> BookingRecorder
BookingRecorder -[hidden]-> Bill

Booking -> PayingGuest

entity Booking {
  Integer id
  PayingGuest guest
  BookingDate bookingDate
  Integer numberOfGuests
  Optional<Bill> bill
  + addBill(Bill bill)
  + Bill getBill()
}



class BookingDate #grey {
  LocalDate date
  LocalTime time
}

entity BillItem {
  Integer id
  Integer dishId
  Integer quantity
}

enum DishType {
  MAIN_COURSE,
  DESSERT,
  BEVERAGE
}

abstract Menu {
  List<Integer> dishes
  DishDB dishDb
  + void addDish(Dish dish)
  + List<Integer> getDishIds()
  + Dish getDish(Integer id)
}

abstract Bill {
  Integer id
  Map<Integer,Bill> billItems
  + addBillItem(BillItem billItem)
  + List<Integer> getBillIds()
  + Bill getBill(Integer id)
}



abstract BookingRecorder{
  List<Integer> bookings
  BookingsDB bookingsDb
  + void addBooking(Booking booking)
  + void addBillToBooking(Integer id, Bill bill)
  + List<Integer> getBookingIds()
  + Booking getBooking(Integer id)
}


@enduml